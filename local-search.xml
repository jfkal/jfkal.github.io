<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客推送到github页面刷新无效问题</title>
    <link href="/2025/04/01/%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E5%88%B0github%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2025/04/01/%E5%8D%9A%E5%AE%A2%E6%8E%A8%E9%80%81%E5%88%B0github%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上亿数据量查询变慢优化经验（脱敏）</title>
    <link href="/2024/03/13/%E4%B8%8A%E4%BA%BF%E6%95%B0%E6%8D%AE%E9%87%8F%E6%9F%A5%E8%AF%A2%E5%8F%98%E6%85%A2%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%84%B1%E6%95%8F%EF%BC%89/"/>
    <url>/2024/03/13/%E4%B8%8A%E4%BA%BF%E6%95%B0%E6%8D%AE%E9%87%8F%E6%9F%A5%E8%AF%A2%E5%8F%98%E6%85%A2%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C%EF%BC%88%E8%84%B1%E6%95%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>背景：SQL Server 中某张表的数据量达到了3.4亿条记录（此表中查询用的字段是添加了索引的，且该表需要进行频繁的读写操作），页面查询比较慢，光查一天的数据就要4分多钟。</p><p>解决方案1：首先考虑加机器，但是被Pass掉了，要考虑成本。</p><p>解决方案2：重新生成索引，后续业务有新增的就水平分表。管用，数据很快就查到了5秒左右。但是一周后，又开始变慢。</p><p>解决方案3：观察页面，除了查询用到的字段还有时间条件，尝试在时间字段加索引，并做索引合并。有效，查询一天的数据，优化到了10秒内。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上千万数据迁移（脱敏）</title>
    <link href="/2023/08/16/%E4%B8%8A%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    <url>/2023/08/16/%E4%B8%8A%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<p>背景：MXX系统有些页面的数据展示是基于存储存储过程或视图来的，其中，有些特殊的数据需要跨库查表，这导致生产部门去查数据时候，肉眼可见的慢。想要加快就需要把这一部分数据迁移到与之关联对应的表所在的数据库。</p><p>所用到的环境配置如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">服务器：Windows Server <span class="hljs-number">2016</span>   Intel Pentium(R) Gold G5500 CPU <span class="hljs-variable">@3</span><span class="hljs-number">.8</span>Hz<br>操作系统：Windows <span class="hljs-number">10</span> 专业版<br>内存：<span class="hljs-number">16</span>GB<br>硬盘：SSD <span class="hljs-number">500</span>G<br>MySQL版本：<span class="hljs-number">5.7</span><span class="hljs-number">.25</span><br></code></pre></td></tr></table></figure><p>我们先new一张表出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `trade` (<br>  `id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COLLATE</span> <span class="hljs-string">&#x27;utf8_unicode_ci&#x27;</span>,<br>  `trade_no` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COLLATE</span> <span class="hljs-string">&#x27;utf8_unicode_ci&#x27;</span>,<br>  <span class="hljs-keyword">UNIQUE</span> INDEX `id` (`id`),<br>  INDEX `trade_no` (`trade_no`)<br>)<br>COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;订单&#x27;</span><br><span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;utf8_unicode_ci&#x27;</span><br>ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><p>解决方法1：直接写个循环，循环一千万次。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//开始时间</span><br><span class="hljs-keyword">var</span> startTime = DateTime.Now;<br><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> conn = <span class="hljs-keyword">new</span> MySqlConnection(connsql))<br>&#123;<br>    conn.Open();<br>        <span class="hljs-comment">//插入10万数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++)<br>        &#123;<br>            <span class="hljs-comment">//插入</span><br>            <span class="hljs-keyword">var</span> sql = <span class="hljs-built_in">string</span>.Format(<span class="hljs-string">&quot;insert into trade(id,trade_no) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;);&quot;</span>,<br>                                Guid.NewGuid().ToString(), <span class="hljs-string">&quot;trade_&quot;</span> + (i + <span class="hljs-number">1</span>)<br>                               );<br>            <span class="hljs-keyword">var</span> sqlComm = <span class="hljs-keyword">new</span> MySqlCommand();<br>            sqlComm.Connection = conn;<br>            sqlComm.CommandText = sql;<br>            sqlComm.ExecuteNonQuery();<br>            sqlComm.Dispose();<br>        &#125;<br>        conn.Close();<br>&#125;<br><span class="hljs-comment">//完成时间</span><br><span class="hljs-keyword">var</span> endTime = DateTime.Now;<br><span class="hljs-comment">//耗时</span><br><span class="hljs-keyword">var</span> spanTime = endTime - startTime;<br>Console.WriteLine(<span class="hljs-string">&quot;循环插入方式耗时：&quot;</span> + spanTime.Minutes + <span class="hljs-string">&quot;分&quot;</span> + spanTime.Seconds + <span class="hljs-string">&quot;秒&quot;</span> + spanTime.Milliseconds + <span class="hljs-string">&quot;毫秒&quot;</span>);<br></code></pre></td></tr></table></figure><pre><code class="hljs">这种方法能解决问题，但是会比较慢。为什么呢？因为这样子写会导致我每次去插入一条数据的时候会去连接一下数据库。我们按照上面的代码将数据量缩短到10万条数据为例，总用时4分55秒380。</code></pre><p>解决方法2：减少数据库连接次数，现在我们把多条SQL语句拼接成1条。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>开始时间<br>var startTime <span class="hljs-operator">=</span> DateTime.Now;<br><span class="hljs-keyword">using</span> (var conn <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> MySqlConnection(connsql))<br>&#123;<br>    conn.Open();<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入<span class="hljs-number">10</span>万数据<br>    var <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span> (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i <span class="hljs-operator">&lt;</span> <span class="hljs-number">100000</span>; i<span class="hljs-operator">+</span><span class="hljs-operator">+</span>)<br>    &#123;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入<br>        sql.AppendFormat(&quot;insert into trade(id,trade_no) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;);&quot;,<br>            Guid.NewGuid().ToString(), &quot;trade_&quot; <span class="hljs-operator">+</span> (i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>            );<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>合并插入<br>        if (i <span class="hljs-operator">%</span> <span class="hljs-number">1000</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">999</span>)<br>        &#123;<br>            var sqlComm <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> MySqlCommand();<br>            sqlComm.Connection <span class="hljs-operator">=</span> conn;<br>            sqlComm.CommandText <span class="hljs-operator">=</span> sql.ToString();<br>            sqlComm.ExecuteNonQuery();<br>            sqlComm.Dispose();<br>            sql.Clear();<br>        &#125;<br>    &#125;<br>    conn.Close();<br>&#125;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>完成时间<br>var endTime <span class="hljs-operator">=</span> DateTime.Now;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>耗时<br>var spanTime <span class="hljs-operator">=</span> endTime <span class="hljs-operator">-</span> startTime;<br>Console.WriteLine(&quot;循环插入方式耗时：&quot; <span class="hljs-operator">+</span> spanTime.Minutes <span class="hljs-operator">+</span> &quot;分&quot; <span class="hljs-operator">+</span> spanTime.Seconds <span class="hljs-operator">+</span> &quot;秒&quot; <span class="hljs-operator">+</span> spanTime.Milliseconds <span class="hljs-operator">+</span> &quot;毫秒&quot;);<br></code></pre></td></tr></table></figure><p>现在只需要连接100次数据库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>表设计经验</title>
    <link href="/2023/07/13/%E8%A1%A8%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/"/>
    <url>/2023/07/13/%E8%A1%A8%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1.命名规范"></a>1.命名规范</h3><p>数据库表名、字段名、索引名等都需要命名规范</p><ul><li>表名、字段名必须使用小写字母或<strong>数字(不推荐)</strong> 禁止使用数字开头，禁止使用拼音，并且一般不使用英文缩写</li><li>主键索引名为<strong>pk_字段名</strong>; 唯一索引名为<strong>uk_字段名</strong>; 普通索引名为 <strong>idx_字段名</strong></li></ul><p><strong>先看个反例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">acc_no,<span class="hljs-number">1</span>_acc_no,zhanghao<br></code></pre></td></tr></table></figure><p><strong>看个正例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">account_no,account_number<br></code></pre></td></tr></table></figure><h3 id="2-选择合适的字段类型"><a href="#2-选择合适的字段类型" class="headerlink" title="2.选择合适的字段类型"></a>2.选择合适的字段类型</h3><p>设计表的时候，我们需要选择合适的字段类型，比如 ：</p><ul><li>尽可能选择存储空间小的字段类型，就比如数字类型，从 tinyint (1byte)、smallint (2byte)、int (4byte)、bigint (8byte)</li><li>小数类型如金额，必须选择 decimal ， 禁止使用 float 和 double</li><li>如果存储的字符串长度几乎相等，使用 char 定长字符串类型</li><li>varchar 是可变长字符串，不预先分配存储空间，长度不要超过5000</li><li>如果存储的字符串过长，建议字段类型修改为 text ，同时抽出单独的一张表，用主键与之对应</li></ul><p><strong>那么，问题来了</strong></p><p><strong>为什么长度几乎相等的字符串要选char而不是varchar？</strong></p><p>比如性别(gender)这个字段，只有两个值(男、女)，就一个字符，为什么用char(1),而不是varchar(1)?因为char(1)就真的是只开辟了1个字符大小，而varchar(1)不是只开辟一个字符大小，varchar需要单独记录字符串长度的大小需要额外空间。</p><p><strong>为什么在字段设计的时候有的人设置gender为tinyint,有点设置gender为char(1)?</strong></p><p>在设计表的时候可以通过0和1来标识男还是女，也可以通过 ‘男’ 和 ‘女’ 来标识，可是有什么区别呢?</p><p>这里就涉及到一个概念了，<strong>数据库字段长度的表示到底是 字符长度 还是 字节长度 ？</strong></p><p>其实在MySQL中，<strong>varchar和char类型表示字符长度</strong> ，<strong>而其他类型表示的长度都是字节长度</strong></p><p>举个例子，’男’ 如果<strong>用字符长度来表示就是1</strong>，但是<strong>用字节长度来表示就是3个字节</strong> ，在<strong>UTF-8下中文基本都是三字节，而用0和1来标识男女就只需要一个字节。</strong></p><h3 id="3-主键设计要合理"><a href="#3-主键设计要合理" class="headerlink" title="3.主键设计要合理"></a><strong>3.主键设计要合理</strong></h3><p>主键设计的话，最好不要与业务逻辑有所关联。有些业务上的字段，比如身份证，虽然是唯一的，很多人喜欢用它来做主键，但是不是很建议哈。主键最好是毫无意义的一串独立不重复的数字，比如UUID，又或者Auto_increment自增的主键，或者是雪花算法、Base64算法生成的主键等等。</p><h3 id="4-选择合适的字段长度"><a href="#4-选择合适的字段长度" class="headerlink" title="4.选择合适的字段长度"></a>4.选择合适的字段长度</h3><p>我们在设计表的时候，需要充分考虑一个字段的长度，比如一个用户名字段（它的长度5~20个字符），你觉得应该设置多长呢？可以考虑设置为 <strong>username varchar（32）</strong> 。字段长度一般设置为2的幂（也就是2的n次方）。</p><ul><li><strong>为什么字段长度一般要设置为2的幂呢？</strong></li></ul><p>这是因为数据库在存储数据时，会使用位运算来处理字段的长度，而位运算对于2的幂次方比较方便。如果字段长度不是2的幂，则需要使用算术运算来处理，这样会降低数据库的性能。</p><p>此外，设置字段长度为2的幂也有助于减少数据库的内存使用。数据库会根据字段长度来分配内存空间，如果字段长度不是2的幂，则需要使用更大的内存块来存储，这样会造成内存的浪费。</p><p>因此，为了提高数据库的性能和优化内存使用，一般建议将字段长度设置为2的幂。如果确实需要更长的字段长度，可以使用变长字段类型（如VARCHAR）来适应不同的长度需求。</p><ul><li><strong>varchar(20)和varchar(255)有什么区别？</strong></li></ul><p>通常情况下使用varchar(20)和varchar(255)占用的空间都是一样的,但是使用<strong>索引长度</strong>有所不同。</p><ul><li><strong>int(1)和nt(11)有什么区别？</strong></li></ul><p>在MySQL中，对于int类型的字段，<strong>设置其长度并不是指存储的数字位数或最大值的大小</strong>，而是指<strong>显示宽度</strong>。</p><p>也就是说，<strong>长度设置对实际存储的数据范围和占用空间并无影响</strong>，它主要影响的是数据的<strong>显示格式</strong>。</p><p>举个例子：</p><ol><li>当长度设置为1的时候，表示当该字段值被查询并显示时，MySQL会为这个整数值分配至少1个字符的宽度。如果实际值的位数小于1，MySQL会在前面补足空格以达到指定的显示宽度；如果实际值的位数大于1，则按照实际位数显示。例如，一个值为123的INT字段，若设置长度为1，实际显示时仍会完整显示为“123”，不会截断。</li><li>当长度设置为11的时候，同理，表示当该字段值被查询并显示时，MySQL会为其分配至少11个字符的宽度。同样，如果实际值的位数小于11，前面补足空格；若大于11，则按实际位数显示。</li></ol><ul><li><strong>那为什么会看到有人喜欢设置int(11)呢？</strong></li></ul><p><strong>最大可能位数</strong>： <code>INT</code>类型的最大可能位数是10位（不含正负号），即从-2,147,483,648到2,147,483,647。设置长度为11可以确保任何在这个范围内的整数值在显示时都不需要额外的填充空格。即使数值较小，如只有1位或2位，也能保证有足够的宽度来容纳可能出现的最大位数，使得数据显示整齐且易于阅读。</p><hr><h3 id="5-优先考虑逻辑删除，而不是物理删除"><a href="#5-优先考虑逻辑删除，而不是物理删除" class="headerlink" title="5.优先考虑逻辑删除，而不是物理删除"></a>5.优先考虑逻辑删除，而不是物理删除</h3><p><strong>什么是物理删除？什么是逻辑删除？</strong></p><ul><li>物理删除：把数据从硬盘中删除，可释放存储空间</li><li>逻辑删除：给数据添加一个字段，比如is_deleted，以标记该数据已经逻辑删除。</li></ul><p><strong>物理删除</strong>就是执行delete语句，如删除account_no &#x3D;‘xxx’的账户信息SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> account_info_tab whereaccount_no <span class="hljs-operator">=</span>‘<span class="hljs-number">7758258</span>’;<br></code></pre></td></tr></table></figure><p><strong>逻辑删除</strong>呢，就是这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> account_info_tab <span class="hljs-keyword">set</span> is_deleted <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> account_no <span class="hljs-operator">=</span>‘<span class="hljs-number">5201314</span>’;<br></code></pre></td></tr></table></figure><ul><li><strong>那么为什么推荐逻辑删除而非物理删除？</strong><ol><li>为什么不推荐使用物理删除，因为恢复数据很困难</li><li>物理删除会使自增主键不再连续</li><li>核心业务表 的数据不建议做物理删除，只适合做状态变更。</li></ol></li></ul><h3 id="6-每个表都需要添加几个通用字段如主键、create-time、update-time"><a href="#6-每个表都需要添加几个通用字段如主键、create-time、update-time" class="headerlink" title="6.每个表都需要添加几个通用字段如主键、create_time、update_time"></a>6.每个表都需要添加几个通用字段如主键、create_time、update_time</h3><p>表必备一般来说，或具备这几个字段：</p><ul><li>id： 主键，一个表必须得有主键，必须</li><li>create_time： 创建时间，必须</li><li>modifed_time: 修改时间，必须，更新记录时，需要更新它</li><li>version : 数据记录的版本号，用于乐观锁，非必须</li><li>remark ：数据记录备注，非必须</li><li>modified_by :修改人，非必须</li><li>creator ：创建人，非必须</li></ul><h3 id="7-尽可能的使用not-null定义字段"><a href="#7-尽可能的使用not-null定义字段" class="headerlink" title="7.尽可能的使用not null定义字段"></a>7.尽可能的使用not null定义字段</h3><p>如果没有特殊的理由， 一般都建议将字段定义为 NOT NULL 。</p><p><strong>为什么要这样做呢？</strong></p><ul><li>首先，NOT NULL 可以防止出现空指针的问题</li><li>其次，NULL 值的存储也需要额外的空间，它也会导致比较运算更为复杂，使优化器难以优化SQL</li><li>NULL 值有可能会导致索引失效。一般这种情况又细分为：</li></ul><ol><li>数据库引擎不支持可空字段的索引。例如，MySQL的某些版本在创建包含可空字段的索引时可能会遇到问题。在这种情况下，可以考虑使用触发器或其他方法来处理可空字段的查询。</li><li>索引类型不支持可空字段。例如，全文索引通常不支持可空字段。在这种情况下，可以考虑使用其他类型的索引，如B-tree索引。</li><li>索引列中存在大量重复值。当一个字段包含大量重复值时，索引的效果会降低。在这种情况下，可以考虑使用其他字段作为索引，或者创建一个复合索引。</li><li>索引列的数据分布不均匀。如果索引列的数据分布非常不均匀，那么索引的效果也会受到影响。在这种情况下，可以考虑重新设计表结构或调整索引策略。</li><li>使用了函数或表达式作为索引列。在某些数据库中，使用函数或表达式作为索引列可能导致索引失效。在这种情况下，可以考虑将函数或表达式的结果存储在一个单独的列中，并使用该列作为索引。</li></ol><h3 id="8-设计表时，评估哪些字段需要加索引"><a href="#8-设计表时，评估哪些字段需要加索引" class="headerlink" title="8.设计表时，评估哪些字段需要加索引"></a>8.设计表时，评估哪些字段需要加索引</h3><p>首先，评估你的表数据量。如果你的表数据量只有一百几十行，就没有必要加索引。否则设计表的时候，如果有查询条件的字段，一般就需要建立索引。但是索引也不能滥用：</p><ul><li>索引也不要建得太多，一般单表索引个数不要超过5个。因为创建过多的索引，会降低写得速度。</li><li>区分度不高的字段，不能加索引，如性别等</li><li>索引创建完后，还是要注意避免索引失效的情况，如使用mysql的内置函数，会导致索引失效的</li><li>索引过多的话，可以通过联合索引的话方式来优化。然后的话，索引还有一些规则，如覆盖索引，最左匹配原则等等。</li></ul><p>举个例子，假设现在有张user表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user_info_tab (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">--出于隐私考虑，用户注册时可以不提供年龄</span><br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `modifed_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p> 对于这张表，很可能会根据 user_id 或者 name查询用户信息，并且，user_id是唯一的，因此是可以给user_id加上唯一索引，name加上普通索引 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user_info_tab (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `modifed_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_name` (`name`) <span class="hljs-keyword">USING</span> BTREE,<br>  <span class="hljs-keyword">UNIQUE</span> KEY un_user_id (user_id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>这只是举个例子，<font style="color:#DF2A3F;">对于ID这个字段我一般都是习惯设置成varchar,因为在实际工作中碰到过一个事情，就是去对接第三方的数据，你并不知道这个三方数据的ID是什么类型，这时候用varchar就会灵活的多，因为它 ，可以存储数字、字母、特殊字符等。  </font></p><h3 id="9-个人认为不需要严格遵守3NF，通过业务字段冗余来减少表关联"><a href="#9-个人认为不需要严格遵守3NF，通过业务字段冗余来减少表关联" class="headerlink" title="9.个人认为不需要严格遵守3NF，通过业务字段冗余来减少表关联"></a><strong>9.个人认为不需要严格遵守3NF，通过业务字段冗余来减少表关联</strong></h3><p><strong>什么是数据库三范式（3NF），大家是否还有印象吗？</strong></p><ul><li><strong>第一范式：对属性的原子性，要求属性具有原子性，不可再分解；</strong></li><li><strong>第二范式：对记录的唯一性，要求记录有唯一标识，即实体的唯一性，即不存在部分依赖；</strong></li><li><strong>第三方式：对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</strong></li></ul><p><strong>我们设计表及其字段之间的关系, 应尽量满足第三范式。但是有时候，可以适当冗余，来提高效率。比如以下这张表</strong></p><table><thead><tr><th><strong>商品名称</strong></th><th><strong>商品型号</strong></th><th><strong>单价</strong></th><th><strong>数量</strong></th><th><strong>总金额</strong></th></tr></thead><tbody><tr><td><strong>手机</strong></td><td><strong>华为</strong></td><td><strong>9000</strong></td><td><strong>5</strong></td><td><strong>45000</strong></td></tr></tbody></table><p><strong>以上这张存放商品信息的基本表。总金额这个字段的存在，表明该表的设计不满足第三范式，因为总金额可以由<em><strong><em>单价</em>数量</strong></em>*得到，说明总金额是冗余字段。</strong></p><p><strong>但是，增加总金额这个冗余字段，可以提高查询统计的速度，这就是<strong><strong>以空间换时间</strong></strong>的作法。</strong></p><h3 id="10-一张表的字段不宜过多"><a href="#10-一张表的字段不宜过多" class="headerlink" title="10.一张表的字段不宜过多"></a>10.一张表的字段不宜过多</h3><p>我们建表的时候，要牢记，一张表的字段不宜过多哈，一般尽量不要超过20个字段。</p><p>如果一张表的字段过多，表中保存的数据可能就会很大，查询效率就会很低。因此，一张表不要设计太多字段哈，如果业务需求，实在需要很多字段，可以把一张大的表，拆成多张小的表，它们的主键相同即可。</p><p>当表的字段数非常多时，可以将表分成两张表，一张作为条件查询表，一张作为详细内容表 (主要是为了性能考虑)。</p><h3 id="11-避免使用MySQL保留字"><a href="#11-避免使用MySQL保留字" class="headerlink" title="11. 避免使用MySQL保留字"></a>11. 避免使用MySQL保留字</h3><p>如果库名、表名、字段名等属性含有保留字时，SQL语句必须用反引号来引用属性名称，这将使得SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</p><p>因此，我们一般<code>避免使用MySQL保留字</code>，如<code>select</code>、<code>interval</code>、<code>desc</code>等等</p><h3 id="12-不搞外键关联，一般都在代码维护"><a href="#12-不搞外键关联，一般都在代码维护" class="headerlink" title="12. 不搞外键关联，一般都在代码维护"></a>12. 不搞外键关联，一般都在代码维护</h3><p>什么是外键呢？</p><p>外键，也叫<code>FOREIGN KEY</code>，它是用于将两个表连接在一起的键。<code>FOREIGN KEY</code>是一个表中的一个字段（或字段集合），它引用另一个表中的<code>PRIMARY KEY</code>。它是用来保证数据的一致性和完整性的。</p><p>阿里的Java规范也有这么一条：</p><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p><p>为什么不推荐使用外键呢？</p><ul><li>使用外键存在性能问题、并发死锁问题、使用起来不方便等等。每次做DELETE或者UPDATE都必须考虑外键约束，会导致开发的时候很难受,测试数据造数据也不方便。</li><li>还有一个场景不能使用外键，就是分库分表。</li></ul><h3 id="13-一般都选择INNODB存储引擎"><a href="#13-一般都选择INNODB存储引擎" class="headerlink" title="13. 一般都选择INNODB存储引擎"></a>13. 一般都选择INNODB存储引擎</h3><p>建表是需要选择<strong>存储引擎</strong>的，我们一般都选择<code>INNODB</code>存储引擎，除非读写比率小于<code>1%</code>, 才考虑使用<code>MyISAM</code> 。</p><p>有些小伙伴可能会有疑惑，不是还有<code>MEMORY</code>等其他存储引擎吗？什么时候使用它呢？其实其他存储引擎一般除了都建议在<code>DBA</code>的指导下使用。(小公司的我就是我自己的DBA&#x2F;握拳)。<br>我们来复习一下这MySQL这三种存储引擎的对比区别吧：</p><table><thead><tr><th>特性</th><th>INNODB</th><th>MyISAM</th><th>MEMORY</th></tr></thead><tbody><tr><td>事务安全</td><td>支持</td><td>无</td><td>无</td></tr><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>高</td></tr><tr><td>插入数据速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>是否支持外键</td><td>支持</td><td>无</td><td>无</td></tr></tbody></table><h3 id="14-选择合适统一的字符集。"><a href="#14-选择合适统一的字符集。" class="headerlink" title="14. 选择合适统一的字符集。"></a>14. 选择合适统一的字符集。</h3><p>数据库库、表、开发程序等都需要统一字符集，通常中英文环境用<code>utf8</code>。<br>MySQL支持的字符集有<code>utf8、utf8mb4、GBK、latin1</code>等。</p><ul><li>utf8：支持中英文混合场景，国际通过，3个字节长度</li><li>utf8mb4: 完全兼容utf8，4个字节长度，一般存储emoji表情需要用到它。</li><li>GBK ：支持中文，但是不支持国际通用字符集，2个字节长度</li><li>latin1：MySQL默认字符集，1个字节长度</li></ul><h3 id="15-如果你的数据库字段是枚举类型的，需要在comment注释清楚"><a href="#15-如果你的数据库字段是枚举类型的，需要在comment注释清楚" class="headerlink" title="15. 如果你的数据库字段是枚举类型的，需要在comment注释清楚"></a>15. 如果你的数据库字段是枚举类型的，需要在comment注释清楚</h3><p>如果你设计的数据库字段是枚举类型的话，就需要在comment后面注释清楚每个枚举的意思，以便于维护<br>正例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">`session_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;session授权态 00：在线-授权态有效 01：下线-授权态失效 02：下线-主动退出 03：下线-在别处被登录&#x27;</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">`session_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;session授权态&#x27;</span><br></code></pre></td></tr></table></figure><p>并且，如果你的枚举类型在未来的版本有增加修改的话，也需要同时维护到<code>comment</code>。</p><h3 id="16-时间的类型选择"><a href="#16-时间的类型选择" class="headerlink" title="16. 时间的类型选择"></a>16. 时间的类型选择</h3><p>我们设计表的时候，一般都需要加通用时间的字段，如<code>create_time、modified_time</code>等等。那对于时间的类型，我们该如何选择呢？<br>对于MySQL来说，主要有<code>date、datetime、time、timestamp 和 year</code>。</p><ul><li>date ：表示的日期值, 格式yyyy-mm-dd,范围1000-01-01 到 9999-12-31，3字节</li><li>time ：表示的时间值，格式 hh:mm:ss，范围-838:59:59 到 838:59:59，3字节</li><li>datetime：表示的日期时间值，格式yyyy-mm-dd hh:mm:ss，范围1000-01-01 00:00:00到9999-12-31 23:59:59&#96;&#96;&#96;,8字节，跟时区无关</li><li>timestamp：表示的时间戳值，格式为yyyymmddhhmmss，范围1970-01-01 00:00:01到2038-01-19 03:14:07，4字节，跟时区有关</li><li>year：年份值，格式为yyyy。范围1901到2155，1字节</li></ul><p>推荐优先使用<code>datetime</code>类型来保存日期和时间，因为存储范围更大，且跟时区无关。</p><h3 id="17-不建议使用Stored-procedure-包括存储过程，触发器-。"><a href="#17-不建议使用Stored-procedure-包括存储过程，触发器-。" class="headerlink" title="17. 不建议使用Stored procedure (包括存储过程，触发器) 。"></a>17. 不建议使用Stored procedure (包括存储过程，触发器) 。</h3><p><strong>什么是存储过程</strong><br>    已预编译为一个可执行过程的一个或多个SQL语句。</p><p><strong>什么是触发器</strong><br>触发器，指一段代码，当触发某个事件时，自动执行这些代码。使用场景：</p><ul><li>可以通过数据库中的相关表实现级联更改。</li><li>实时监控某张表中的某个字段的更改而需要做出相应的处理。</li><li>例如可以生成某些业务的编号。</li><li>注意不要滥用，否则会造成数据库及应用程序的维护困难。</li></ul><p>对于MYSQL来说，存储过程、触发器等还不是很成熟， 并没有完善的出错记录处理，不建议使用。</p><h3 id="18-1-N-关系的设计"><a href="#18-1-N-关系的设计" class="headerlink" title="18. 1:N 关系的设计"></a>18. 1:N 关系的设计</h3><p>日常开发中，1对多的关系应该是非常常见的。比如一个班级有多个学生，一个部门有多个员工等等。这种的建表原则就是： 在从表（N的这一方）创建一个字段，以字段作为外键指向主表（1的这一方）的主键。示意图如下:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/33675133/1721360791737-ab858810-29a8-4dbf-beb0-d384bc59f50c.webp"></p><p>学生表是多（N）的一方，会有个字段class_id保存班级表的主键。当然，一般不加外键约束哈，只是单纯保存这个关系而已。</p><p>有时候两张表存在N:N关系时，我们应该消除这种关系。通过增加第三张表，把N:N修改为两个 1:N。比如图书和读者，是一个典型的多对多的关系。一本书可以被多个读者借，一个读者又可以借多本书。我们就可以设计一个借书表，包含图书表的主键，以及读者的主键，以及借还标记等字段。</p><h3 id="19-大字段"><a href="#19-大字段" class="headerlink" title="19. 大字段"></a>19. 大字段</h3><p>设计表的时候，我们尤其需要关注一些大字段，即占用较多存储空间的字段。比如用来记录用户评论的字段，又或者记录博客内容的字段，又或者保存合同数据的字段。如果直接把表字段设计成text类型的话，就会浪费存储空间，查询效率也不好。</p><p>在MySQl中，这种方式保存的设计方案，其实是不太合理的。这种非常大的数据，可以保存到mongodb中，然后，在业务表保存对应<code>mongodb</code>的<code>id</code>即可。</p><p>这种设计思想类似于，我们表字段保存图片时，为什么不是保存图片内容，而是直接保存图片url即可。</p><h3 id="20-考虑是否需要分库分表"><a href="#20-考虑是否需要分库分表" class="headerlink" title="20. 考虑是否需要分库分表"></a>20. 考虑是否需要分库分表</h3><p>什么是分库分表呢？</p><ul><li>分库：就是一个数据库分成多个数据库，部署到不同机器。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/33675133/1721360972287-74c2bf75-f3a1-4871-96c5-5fda760d0431.webp"></p><ul><li>分表：就是一个数据库表分成多个表。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/33675133/1721360972292-03df1265-1107-4e96-92f0-c0a3a9f93b16.webp"></p><p>我们在设计表的时候，其实可以提前估算一下，是否需要做分库分表。比如一些用户信息，未来可能数据量到达百万设置千万的话，就可以提前考虑分库分表。</p><p>为什么需要分库分表: 数据量太大的话，SQL的查询就会变慢。如果一个查询SQL没命中索引，千百万数据量级别的表可能会拖垮整个数据库。即使SQL命中了索引，如果表的数据量超过一千万的话，查询也是会明显变慢的。这是因为索引一般是B+树结构，数据千万级别的话，B+树的高度会增高，查询就变慢啦。</p><p>分库分表主要有水平拆分、垂直拆分的说法，拆分策略有<code>range</code>范围、<code>hash</code>取模。而分库分表主要有这些问题：</p><ul><li>事务问题</li><li>跨库关联</li><li>排序问题</li><li>分页问题</li><li>分布式ID</li></ul><h3 id="21-sqL-编写的一些优化经验"><a href="#21-sqL-编写的一些优化经验" class="headerlink" title="21. sqL 编写的一些优化经验"></a>21. sqL 编写的一些优化经验</h3><p>最后的话，跟大家聊来一些写SQL的经验吧：</p><ul><li>查询SQL尽量不要使用<code>select *</code>，而是<code>select</code>具体字段</li><li>如果知道查询结果只有一条或者只要最大&#x2F;最小一条记录，建议用<code>limit 1</code></li><li>应尽量避免在<code>where</code>子句中使用or来连接条件</li><li>注意优化limit深分页问题</li><li>使用<code>where</code>条件限定要查询的数据，避免返回多余的行</li><li>尽量避免在索引列上使用mysql的内置函数</li><li>应尽量避免在 <code>where</code>子句中对字段进行表达式操作</li><li>应尽量避免在<code>where</code> 子句中使用!&#x3D;或&lt;&gt;操作符</li><li>使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。</li><li>对查询进行优化，应考虑在<code>where</code> 及 <code>order by</code>涉及的列上建立索引</li><li>如果插入数据过多，考虑批量插入</li><li>在适当的时候，使用覆盖索引</li></ul><p>**<br>**</p><hr><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/12/hello-world/"/>
    <url>/2023/07/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
